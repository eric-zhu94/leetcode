class Solution:
    #iterate through matrix via BFS / DFS
    #BFS better due to less memory usage as it is an iterative solution
    #O(mn) complexity as we look at each element once
    #store seen items in a set so we do not add them into the queue 
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        seen = set()
        if grid is None or len(grid) == 0:
            return 0
        nrow = len(grid)
        ncol = len(grid[0])
        for i in range(nrow):
            for j in range(ncol):
                if grid[i][j] == "1" and (i, j) not in seen:
                    count +=1
                    queue = []
                    seen.add((i, j))
                    adjacents = self.adjacent(i, j, nrow, ncol)
                    for cell in adjacents:
                        queue.insert(0, cell)
                    while len(queue) > 0:
                        item = queue.pop()
                        if grid[item[0]][item[1]] == "1" and item not in seen:
                            seen.add(item)
                            adjacents = self.adjacent(item[0], item[1], nrow, ncol)
                            for cell in adjacents:
                                queue.insert(0, cell)
                            
        return count                 
                    
                    
    def adjacent(self, x, y, nrow, ncol):
        #add in UDLR order
        adjacent = []
        if x > 0:
            adjacent.append((x - 1, y))
        if x < nrow - 1:
            adjacent.append((x + 1, y))
        if y > 0:
            adjacent.append((x, y - 1))
        if y < ncol - 1:
            adjacent.append((x, y + 1))

        return adjacent
        
        

        
